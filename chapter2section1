1.数据类型
用户输入的数据包括标识符（1号数据2号数据...）、日期、连续型变量、名义型变量（类别）、有序型变量（级别）
R储存的数据模式包括数据型、字符型、逻辑型、复数型、原生型。默认情况下，只要是数字就会被识别成数据型，汉字则是字符型
需要告诉R，编号不是数字而是是标识符，日期不是数字而是日期，类别型（包括名义型和有序型）不是字符而是名义型和有序型，R才会做正确的处理。
其中标识符被作为行名，类别型被作为因子，日期型被作为日期，后面会逐渐涉及
R储存数据的方式包括标量、向量、数据框、列表。

2.1向量：一行几列，使用c()创建，向量内部的元素的数据模式必须相同
a <- c(1,2,3,4)  #数据型向量
b <- c("one","two","three")  #字符型向量
c <- c(TRUE, FALSE, TRUE, FALSE)  #逻辑型向量
可以通过中括号访问某个元素，例如a[2]是a的第二个元素，a[c(z,4)]是a的第二和第四个元素
赋值给向量、矩阵、数组或列表中某个不存在的元素时，会自动扩展数据结构，例如
a <- c(1,2,3)
a[5] <- 10  #给a的第五个元素赋值为10
a此时有a=（1,2,3，N/A，10）

2.2矩阵：几行几列，使用matrix()创建，矩阵内部的元素的数据模式必须相同
matrix(vector, nrow=number,ncol=number, byrow=T/F, dimnames=list(rownames,colnames))
vector参数包含了矩阵的全部元素，nrow和ncol是行数和列数，byrow表明按行填充，默认按列填充，dimnames包含了可选的以字符型向量表示的行名和列名
同样可以用中括号访问矩阵的元素，例如mat[1, ]是第一行，mat[ ,1]是第一列

2.3数组：几行几列几层，使用array()创建，数组内部的元素的数据模式必须相同
array(vector, dimensions, dimnames)
vector给出数组中的全部元素，dimensions是一个数值型向量，表明各维度的最大行数，dimnames是各维度的名称。
dim1 <- c("A1","A2")
dim2 <- c("B1","B2","B3")
dim3 <- C("C1","C2","C3","C4")
array(1:24, c(2,3,4), dimnames=list(dim1,dim2,dim3))  #创建一个2*3*4的数组，有24个元素，每个维度的名称为dim1-3
数组是矩阵的自然推广，是多个矩阵堆在一起。同样的，也可以用中括号访问某个元素。

2.4数据框：几行几列，使用data.frame()创建，每一列的元素的数据模式必须相同，但列与列之间不需要相同。正因如此，比矩阵更常用
data.frame(col1,col2,col3...)  #各个col可以是不同的，比如第一列是年龄，第二列是是否，第三列是分类
对于标识符，可以通过rowname参数指定，将这一列作为行名
data <- data.frame(ID,age, diabetes, row.names=ID)
访问数据框中的特定的变量需要使用$符号，表示是某个特定数据框中的数据
每个变量前都要写$，很令人沮丧，一般用attach和detach，或单独使用with函数
attach(data)  #将data数据框添加至R的搜索路径中，R遇到变量名会检查数据框
dettach(data)  #将data数据框移除R的搜索路径。这一步可以省略，但应当被例行的放入代码中
当变量名相同时，这样用就不行了，假设data里有个变量名A，环境中也有个叫A，即使绑定data，原始对象获得了优先权，计算结果会出错。
attach和detach只适用于变量名单一的情况，例如只有一个数据框。
with可以将花括号内的语句都只对with针对的函数执行。考察下面一段代码：
with(data, {
  print(A)
  plot(A,C)
  }
 ）
 其中print和plot只针对data中的A和C执行。但生成的结果也只储存在with环境中，如果在with里读取，可以，在with外读，报错
 在中括号段用特殊赋值符<<-将结果赋值给变量，可以储存在全局环境中。
 
 2.5因子：特殊的数据类型
 名义型变量（类别）没有顺序关系，有序型变量（级别）有顺序关系，但没有数量关系。他们在R中被称为普通因子和有序因子。
 这一属性非常重要，它影响了数据如何分析和可视化，只有正确指定因子和因子类型，R才会找到正确的方法。用factor函数指定因子。
 data <- c(TRUE. FALSE, TRUE, TRUE)  #逻辑型向量
 data <- factor(data)  #将逻辑型向量转为普通因子，其中1=TURE,2=FALSE，该向量储存为（1,2,1,1）
 如果是有序型变量，还需要按正确的顺序排序，加入ordered参数
 data1 <- c("class1","class2",class3")  #字符型向量
 data1 <- factor(data1, ordered=T)  #将字符型向量转为有序因子，默认按首字母排序
 显然用首字母排序并不好，这时还需要指定次序，用levels覆盖默认次序
 data1 <- factor(data1, ordered=T，levels=c("class1","class2","class3"))  #将class1-3正确的排序为123
 
 2.6列表：所有类型数据的有序集合，使用list()创建，允许用户将多个变量整合到一个变量名下，即使类型各不相同
 list(name1=object1, names=object2, names=object3...)  #names不是必须的
 可以通过双中括号读取元素，例如某个列表中第二个元素是年龄，则mylist[[2]]、mylist[["ages"]]效果相同
